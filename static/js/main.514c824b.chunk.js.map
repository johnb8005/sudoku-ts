{"version":3,"sources":["layout.js","lib/sudoku.ts","sudoku.js","anagram.tsx","routes.tsx","serviceWorker.ts","index.tsx"],"names":["style","borderTop","borderBottom","boxShadow","props","className","to","role","children","href","newSet","dim","Array","fill","map","_","i","initSolset","sudoku","s","getRowCoords","_x","k","getColCoords","x","getCellCoords","r","a1","a2","Math","floor","j","push","checkRow","row","coords","temps","filter","includes","listof2","twoPossibilities","isArray","length","flatMap","y","compareArray","list2Possibilities","substractArray","substractArrayFromArray","a","b","ss","mergedSs","concat","apply","checkDim","funcCoord","rowIdx","solveIteration","strategies","st","pop","solve","nEpochs","console","log","nFound","createArraySeqInt","n","styleTd","border","height","width","textAlign","padding","defSudoku","emptySudoku","React","useState","setS","borderCollapse","fontFamily","key","v","Number","borderRight","type","step","onChange","target","value","onClick","solved","nIteration","s0","SudokuSolve","history","History","basename","process","Default","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.514c824b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nexport default (props) => {\n  return <>\n    <header>\n      <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to=\"/\">Sudoku</Link></h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        <Link className=\"p-2 text-dark\" to=\"/sudoku\">Sudoku</Link>\n        <Link className=\"p-2 text-dark\" to=\"/anagram\">Anagram</Link>\n      </nav>\n    </div>\n    </header>\n\n    <main role=\"main\">\n      <div className=\"container\">\n        {props.children}\n        <div><br/><a href=\"https://github.com/johnb8005/sudoku-ts\">&lt;&lt; Back to Github page</a></div>\n      </div>\n\n    </main>\n  </>;\n}\n","\n// sudoku solver\n// the sudoku board is linearized in a simple array[Option[Int]]\n// there is a solution set array that contain all possible combination: array[array[Int]]\n\n// in all the below functions, the parameter `dim` is the number of dimensions for the sudoku. The traditional sudoku has `dim=3`\n\n/**\n * creates a new (unit) set: [1, 2, 3, ...]\n * @return [1, 2, 3, ...]\n */\nexport const newSet = (dim:number):number[] => Array(dim * dim).fill(0).map((_,i) => i + 1);\n\n/**\n * [description]\n * @param  sudoku: given sudoku linearized. Empty cells are `nulls`\n * @param  \n * @return sudoku but all `nulls` are replaced with an array of all possibilities\n */\nexport const initSolset = (sudoku:(null | number)[], dim:number = 3): (number[] | number)[] => {\n  return sudoku.map(s => {\n    if (s) {\n      return s;\n    }\n\n    return newSet(dim);\n  });\n}\n\n/**\n * get the list of coordinates for a row\n * @param  i: row index (starts at 1)\n * @return e.g. [1, 2, 3, ...]\n */\nexport const getRowCoords = (i:number, dim:number = 3):number[] => Array(dim * dim).fill(0).map((_x, k) => i*dim*dim + k);\n\n/**\n * get the list of coordinates for a column\n * @param  i: row index (starts at 1)\n * @return e.g. [1, 9, 18, ...]\n */\nexport const getColCoords = (i:number, dim:number = 3):number[] => Array(dim * dim).fill(0).map((x, k) => i + dim*dim*k);\n\n/**\n * get the list of coordinates for a cell of cells (in regular sudoku, 3x3 cells)\n * @param  i: row index (starts at 1)\n * @return e.g. [1, 2, 3, 9, 10, 11, ...]\n */\nexport const getCellCoords = (i:number, dim:number = 3) => {\n  if (dim === 3) {\n    if (i=== 0) return [0, 1, 2,  9, 10, 11, 18, 19, 20];\n    if (i=== 1) return [3, 4, 5, 12, 13, 14, 21, 22, 23];\n    if (i=== 2) return [6, 7, 8, 15, 16, 17, 24, 25, 26];\n  // second three cells (from left to right)\n    if (i=== 3) return [27, 28, 29, 36, 37, 38, 45, 46, 47];\n    if (i=== 4) return [30, 31, 32, 39, 40, 41, 48, 49, 50];\n    if (i=== 5) return [33, 34, 35, 42, 43, 44, 51, 52, 53];\n  // third three cells (from left to right)\n    if (i=== 6) return [54, 55, 56, 63, 64, 65, 72, 73, 74];\n    if (i=== 7) return [57, 58, 59, 66, 67, 68, 75, 76, 77];\n    if (i=== 8) return [60, 61, 62, 69, 70, 71, 78, 79, 80];\n  }\n\n\n  const r = [];\n\n  // first adder\n  const a1 = (i % dim )*dim;\n  // second adder\n  const a2 = Math.floor(i/2)*dim*dim*dim;\n\n  for (let j = 0; j < dim; j++) {\n    for (let k = 0; k < dim; k++) {\n      const x = a1 + a2 + j*dim*dim +k;\n      r.push(x);\n    }\n  }\n\n  return r;\n}\n\nexport const list2Possibilities = (row:any[], coords:number[]) => {\n  // filter out all the cells that have 2 digits as a possibility\n  const twoPossibilities = row.filter((r, i) => Array.isArray(r) && r.length === 2 && coords.includes(i));\n\n  // keep the duplicates\n  // go through the upper right triangle (avoid extra unnecessary computation) matrix (formed by the two vectors)\n  return twoPossibilities.flatMap((x, i) => {\n    return twoPossibilities.map((y, j) => {\n      if (i > j && compareArray(x, y)) {\n        return x;\n      }\n\n      return null;\n    });\n  })\n  .filter(_ => _ !== null);\n}\n\n/**\n * looks at one \"set\". a set here is defined as an array where all elements should uniquely contain all digits. In the normal sudoku, that includes rows, cells and columns\n * @param row: full array of sudoku\n * @param coords: coords that represent the \"set\"\n * @return full array but without redundancies within a particular set; if a set contained both `1` and `[1, 3]`, the functoin would return for these cells `1` and `3`\n */\nexport const checkRow = (row:any[], coords:any[]) => {\n  const temps = row.filter((r, i) => typeof r === 'number' && coords.includes(i));\n\n  const listof2 = list2Possibilities(row, coords)\n\n  return row.map((r, i) => {\n    // check if it is a single digit\n    if(typeof r === 'number' || !coords.includes(i)) {\n      return r;\n    }\n\n    // when an array substract the other ruled out possibilities (without substrating itself)\n    const x = substractArray(r, temps);\n    const y = substractArrayFromArray(x, listof2);\n\n    if (y.length === 1) {\n      return y[0];\n    }\n\n    return y;\n  });\n}\n\n/**\n * compares two unsorted array \n * @param  {[type]} a [description]\n * @param  {[type]} b [description]\n * @return true if same array\n */\nexport const compareArray = (a:number[], b:number[]):boolean => {\n  if ( a.length !== b.length) {\n    return false;\n  }\n  return a.filter(function(i) {\n    return !b.includes(i);\n  }).length === 0;  \n}\n\n/**\n * substract array s from a\n */\nexport const substractArray = (a:any[], s:any[]):boolean[] => a.filter(x => !s.includes(x));\n\nexport const substractArrayFromArray = (a:any[], ss:any[]) => {\n  if (a.length === 2 && !compareArray(a, ss)) {\n    return a;\n  }\n\n  const mergedSs = [].concat.apply([], ss);\n\n  return substractArray(a, mergedSs);\n}\n\n/**\n * generalization of checkRow\n * @param  {[type]} funcCoord : the function that describes the set\n\n */\nexport const checkDim = (sudoku:(number[] | number)[], funcCoord:CoordFunc, dim:number, rowIdx = 0):any => {\n  if (rowIdx === dim * dim ) {\n    return sudoku;\n  }\n\n  const coords = funcCoord(rowIdx, dim);\n  const s = checkRow(sudoku, coords);\n\n  return checkDim(s, funcCoord, dim, rowIdx + 1);\n}\n\ntype CoordFunc = (i: number, dim?: number) => number[]\n\n/**\n * go through all types of \"set\" once\n * @param  {[type]} sudoku         [description]\n * @return sudoku array without redundancies that were found.\n */\nexport const solveIteration = (sudoku:(number[] | number)[], dim:number = 3, strategies:CoordFunc[] = [getRowCoords, getColCoords, getCellCoords]):(number[] | number)[] => {\n  const st = strategies.pop()\n\n  if(st){\n    const s = checkDim(sudoku, st, dim);\n    return solveIteration(s, dim, strategies);\n  }\n\n  return sudoku;\n}\n\n/**\n * iterates over `solveIteration`\n */\nexport const solve = (sudoku:(number[] | number)[], dim:number = 3, nEpochs:number = 30):any => {\n  //console.log(`=== computing epoch ${nEpochs} (counting backwards) ===`)\n  if (nEpochs === 0) {\n    console.log(`algorithm after all epochs were exhausted (${nEpochs})`);\n    return sudoku;\n  }\n\n  const nFound = sudoku.filter(x => typeof x !== 'number').length;\n\n  //console.log(`the grid contains ${nFound}/${dim ** 4} cells that are undefined (${(100 * nFound/(dim ** 4)).toFixed(2)}%)`)\n\n  // check if something is left to solve, else return array\n  if(nFound === 0) {\n    console.log(`algorithm aborted early at epochs ${nEpochs}`);\n    return sudoku;\n  }\n\n  const s = solveIteration(sudoku, dim);\n\n  return solve(s, dim, nEpochs - 1);\n}\n\nexport const solveWithInit = (sudoku:(null | number)[], dim:number = 3, nIteration:number = 30) => {\n  const s0 = initSolset(sudoku);\n  return solve(s0, dim, nIteration);\n}\n\n\nexport const printSudoku = (s:number[][], dim:number = 3, cutoff:number = 2) => Array(dim**2).fill(0).map((_, j) => {\n  return s\n    .filter((x, i) => i >= j*9 && i <= (j+1)*9 -1)\n    .map(x => x.length > cutoff ? `(-${x.length}-)` : x )\n    .reduce((a, b) => `${a} \\t${b}`);\n})\n.reduce((a, b) => `${a}\\n${b}`);\n","import React from 'react';\n\nimport * as SudokuSolve from './lib/sudoku';\n\nconst createArraySeqInt = (n = 9 ) => Array(...Array(n)).map((_, i) => i);\n\nconst styleTd = {\n  border: 'solid thin',\n  height: '2.4em',\n  width: '2.4em',\n  textAlign: 'center',\n  padding: 0\n};\n\nconst defSudoku = [\n  null, null, null, 4, null, null, null, 8, null,\n  null, null, 6, null, 8, null, 1, null, 3,\n  null, 8, null, 1, null, 3, null, 5, null,\n  2, null, null, null, 6, null, 8, null, 1,\n  null, 6, null, 8, null, 1, null, 3, 4,\n  null, null, 1, null, 3, 4, null, 6, null,\n  null, 4, null, 6, 7, null, 9, null, 2,\n  6, null, null, 9, null, 2, null, 4, 5,\n  null, null, 2, null, null, null, null, null, null\n];\n\nconst emptySudoku = (new Array(9*9)).fill(null);\n\nexport default () => {\n  const [ s, setS ] = React.useState(defSudoku);\n\n  const onChange = (k, v) => {\n    const x = v.target.value;\n\n    if(x ==='') {\n      s[k] = null;\n\n      setS([...s]);\n    }\n\n    if (Number(x) && x > 0 && x <= 9) {\n      s[k] = Number(x);\n\n      setS([...s]);\n    }\n  }\n\n  const handleSolve = () => {\n    const solved = SudokuSolve.solveWithInit(s);\n\n    setS(solved);\n  }\n\n  const clear = () => setS(emptySudoku);\n\n  return <>\n    <table style={{borderCollapse: 'collapse', fontFamily: 'Calibri, sans-serif'}}>\n      <tbody>\n        {createArraySeqInt().map(i => <tr key={i} style={i%3 === 2 ? {borderBottom: 'solid medium'} : {}}>{createArraySeqInt().map(j => {\n          const k = i*9 + j;\n          const v = Number(s[k]) && s[k] > 0 ? s[k] : '';\n          return (<td key={j + '-' + i} style={j%3 === 2 ? {...styleTd, borderRight: 'solid medium'} : styleTd}>\n            <input type=\"text\" step=\"false\" onChange={(x) => onChange(k, x)} value={v} style={{width: '100%', 'MozAppearance': 'textfield', border: 0}}/>\n          </td>);\n        })}</tr>)}\n      </tbody>\n    </table>\n    <br/>\n    <button className=\"btn btn-primary\" onClick={handleSolve}>Solve</button>\n    &nbsp;\n    <button className=\"btn btn-secondary\" onClick={clear}>Reset</button>\n  </>;\n}\n","import React from 'react';\n\nexport default () => <p><i>Not implemented yet</i></p>\n","import React from 'react';\n\nimport { Router, Switch, Route } from 'react-router-dom';\n\n\nimport Layout from './layout';\nimport Sudoku from './sudoku';\nimport Anagram from './anagram';\n\nimport * as History from 'history';\n\n\nconst history:any = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || '',\n});\n\nconst Default = () => <p>Click on the menu to get started</p>;\n\nexport default () =>{\n    return <Router history={history}>\n       <Layout>\n        <Switch>\n          <Route exact path=\"/sudoku\" component={() => <Sudoku/>}/>\n          <Route exact path=\"/anagram\" component={() => <Anagram/>}/>\n          <Route component={() => <Default/>}/>\n        </Switch>\n        </Layout>\n      </Router>;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}